import {
  __commonJS,
  __require
} from "./chunk-2TUXWMP5.js";

// browser-external:crypto
var require_crypto = __commonJS({
  "browser-external:crypto"(exports, module) {
    module.exports = Object.create(new Proxy({}, {
      get(_, key) {
        if (key !== "__esModule" && key !== "__proto__" && key !== "constructor" && key !== "splice") {
          console.warn(`Module "crypto" has been externalized for browser compatibility. Cannot access "crypto.${key}" in client code. See https://vite.dev/guide/troubleshooting.html#module-externalized-for-browser-compatibility for more details.`);
        }
      }
    }));
  }
});

// node_modules/uuid-random/index.js
var require_uuid_random = __commonJS({
  "node_modules/uuid-random/index.js"(exports, module) {
    (function() {
      var buf, bufIdx = 0, hexBytes = [], i;
      for (i = 0; i < 256; i++) {
        hexBytes[i] = (i + 256).toString(16).substr(1);
      }
      uuid.BUFFER_SIZE = 4096;
      uuid.bin = uuidBin;
      uuid.clearBuffer = function() {
        buf = null;
        bufIdx = 0;
      };
      uuid.test = function(uuid2) {
        if (typeof uuid2 === "string") {
          return /^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i.test(uuid2);
        }
        return false;
      };
      var crypt0;
      if (typeof crypto !== "undefined") {
        crypt0 = crypto;
      } else if (typeof window !== "undefined" && typeof window.msCrypto !== "undefined") {
        crypt0 = window.msCrypto;
      }
      if (typeof module !== "undefined" && typeof __require === "function") {
        crypt0 = crypt0 || require_crypto();
        module.exports = uuid;
      } else if (typeof window !== "undefined") {
        window.uuid = uuid;
      }
      uuid.randomBytes = function() {
        if (crypt0) {
          if (crypt0.randomBytes) {
            return crypt0.randomBytes;
          }
          if (crypt0.getRandomValues) {
            if (typeof Uint8Array.prototype.slice !== "function") {
              return function(n) {
                var bytes = new Uint8Array(n);
                crypt0.getRandomValues(bytes);
                return Array.from(bytes);
              };
            }
            return function(n) {
              var bytes = new Uint8Array(n);
              crypt0.getRandomValues(bytes);
              return bytes;
            };
          }
        }
        return function(n) {
          var i2, r = [];
          for (i2 = 0; i2 < n; i2++) {
            r.push(Math.floor(Math.random() * 256));
          }
          return r;
        };
      }();
      function randomBytesBuffered(n) {
        if (!buf || bufIdx + n > uuid.BUFFER_SIZE) {
          bufIdx = 0;
          buf = uuid.randomBytes(uuid.BUFFER_SIZE);
        }
        return buf.slice(bufIdx, bufIdx += n);
      }
      function uuidBin() {
        var b = randomBytesBuffered(16);
        b[6] = b[6] & 15 | 64;
        b[8] = b[8] & 63 | 128;
        return b;
      }
      function uuid() {
        var b = uuidBin();
        return hexBytes[b[0]] + hexBytes[b[1]] + hexBytes[b[2]] + hexBytes[b[3]] + "-" + hexBytes[b[4]] + hexBytes[b[5]] + "-" + hexBytes[b[6]] + hexBytes[b[7]] + "-" + hexBytes[b[8]] + hexBytes[b[9]] + "-" + hexBytes[b[10]] + hexBytes[b[11]] + hexBytes[b[12]] + hexBytes[b[13]] + hexBytes[b[14]] + hexBytes[b[15]];
      }
    })();
  }
});
export default require_uuid_random();
//# sourceMappingURL=uuid-random.js.map
